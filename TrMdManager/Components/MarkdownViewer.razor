@page "/viewer"
@using Microsoft.JSInterop
@using TrMdManager.Services
@inject IJSRuntime JS
@inject IMarkdownService MarkdownService

<div class="markdown-viewer-container">
    <div class="toolbar">
        <button class="btn @(IsPreviewMode ? "active" : "")" @onclick="ToggleView">
            @(IsPreviewMode ? "Raw" : "Preview")
        </button>
        <button class="btn" @onclick="OpenEditor">Open Editor</button>
        <button class="btn btn-feedback" @onclick="OpenFeedbackForm">Give Feedback</button>
    </div>
    
    <div class="content-area">
        @if (IsPreviewMode)
        {
            <div class="markdown-content">
                @((MarkupString)RenderedHtml)
            </div>
        }
        else
        {
            <div class="raw-view">
                <pre>@MarkdownContent</pre>
            </div>
        }
    </div>
</div>

<style>
    .markdown-viewer-container {
        max-width: 980px;
        margin: 0 auto;
        padding: 45px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
    }
    
    .toolbar {
        position: fixed;
        top: 10px;
        right: 10px;
        background: white;
        border: 1px solid #d1d5da;
        border-radius: 6px;
        padding: 8px;
        box-shadow: 0 1px 3px rgba(27,31,35,0.12);
        z-index: 1000;
        display: flex;
        gap: 8px;
    }
    
    .btn {
        padding: 5px 16px;
        background: #fafbfc;
        color: #24292e;
        border: 1px solid rgba(27,31,35,0.15);
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
    }
    
    .btn:hover {
        background: #f3f4f6;
    }
    
    .btn.active {
        background: #0969da;
        color: white;
        border-color: #0969da;
    }
    
    .btn-feedback {
        background: #007bff;
        color: white;
        border-color: #007bff;
    }
    
    .btn-feedback:hover {
        background: #0056b3;
        border-color: #0056b3;
    }
    
    .raw-view {
        background-color: #f6f8fa;
        padding: 16px;
        border-radius: 6px;
        font-family: ui-monospace, SFMono-Regular, Consolas, monospace;
        font-size: 12px;
        line-height: 1.45;
    }
    
    .markdown-content {
        line-height: 1.5;
        color: #24292e;
    }
    
    .markdown-content h1,
    .markdown-content h2 {
        border-bottom: 1px solid #e1e4e8;
        padding-bottom: 0.3em;
    }
    
    .markdown-content code {
        padding: 0.2em 0.4em;
        background-color: rgba(175,184,193,0.2);
        border-radius: 6px;
        font-size: 85%;
    }
    
    .markdown-content pre {
        padding: 16px;
        overflow: auto;
        background-color: #f6f8fa;
        border-radius: 6px;
    }
    
    .markdown-content blockquote {
        padding: 0 1em;
        color: #57606a;
        border-left: 0.25em solid #d1d5da;
    }
    
    .markdown-content table {
        border-collapse: collapse;
        margin-bottom: 16px;
    }
    
    .markdown-content table th,
    .markdown-content table td {
        padding: 6px 13px;
        border: 1px solid #d1d5da;
    }
    
    .markdown-content a {
        color: #0969da;
        text-decoration: none;
    }
    
    .markdown-content a:hover {
        text-decoration: underline;
    }
</style>

@code {
    private string MarkdownContent = "";
    private string RenderedHtml = "";
    private bool IsPreviewMode = true;
    
    protected override async Task OnInitializedAsync()
    {
        // Get markdown content from the extension
        var result = await JS.InvokeAsync<dynamic>("getMarkdownContentFromExtension");
        if (result != null)
        {
            MarkdownContent = result.content?.ToString() ?? "";
            if (!string.IsNullOrEmpty(MarkdownContent))
            {
                RenderedHtml = MarkdownService.ConvertToHtml(MarkdownContent);
            }
        }
    }
    
    private void ToggleView()
    {
        IsPreviewMode = !IsPreviewMode;
    }
    
    private async Task OpenEditor()
    {
        await JS.InvokeVoidAsync("chrome.runtime.sendMessage", new
        {
            action = "openEditor",
            content = MarkdownContent
        });
    }
    
    private async Task OpenFeedbackForm()
    {
        await JS.InvokeVoidAsync("window.open", "https://forms.gle/gctmvQ4bYv72PHRA9", "_blank");
    }
}